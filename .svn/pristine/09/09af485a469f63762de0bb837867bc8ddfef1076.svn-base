--- /home/chilbolton_software/universal_radar_code/RNC/src/RNC_NetCDF.c	2011-11-29 10:04:43.000000000 +0000
+++ ./RNC_NetCDF.c	2011-09-06 10:15:54.000000000 +0000
@@ -13,8 +13,6 @@
 	included dual-pol. parameters; phi dp and rho hv
 	Modified on 04/10/2010 (JCN)
 	included uncoded rapid spectra dump
-	Modified on 28/11/2011 (JCN)
-	included skewness and kurtosis
 */
 
 
@@ -29,7 +27,7 @@
 #include <math.h>
 
 #include <RNC.h>
-#include "/home/chilbolton_software/universal_radar_code/RSP/include/RSP.h"
+#include "/root/universal_radar_code/RSP/include/RSP.h"
 
 void RNC_OpenNetcdfFile( URC_ScanStruct *args, int radar, int *ncid )
 {
@@ -173,12 +171,14 @@
 		case ACROBAT_CODED_SPECTRA :
 		case COPERNICUS_SPECTRA :
 		case GALILEO_SPECTRA :
+		case TEST_SPECTRA :
 		{
 			strcat( netcdf_pathfile, "-fft" );
 			break;
 		}
 		case COPERNICUS_SPECTRA_RAPID :
 		case GALILEO_SPECTRA_RAPID :
+		case TEST_SPECTRA_RAPID :
                 {
                         strcat( netcdf_pathfile, "-fft-rapid" );
                         break;
@@ -220,6 +220,9 @@
 		case GALILEO :
 			strcpy ( buffer, "GALILEO" );
                         break;
+		case TEST :
+			strcpy ( buffer, "TEST-GALILEO" );
+			break;
 		case CAMRA :
 			strcpy ( buffer, "CAMRA" );
                         break;
@@ -239,6 +242,9 @@
 	        case GALILEO :
                         strcpy ( buffer, "94 GHz radar (GALILEO)");
                         break;
+	        case TEST :
+                        strcpy ( buffer, "94 GHz radar (TEST-GALILEO)");
+                        break;
 	        case CAMRA :
 		        strcpy ( buffer, "3 GHz Advanced Meteorological Radar (CAMRa)");
 		        break;
@@ -919,6 +925,7 @@
 	{
 		case COPERNICUS_SPECTRA_RAPID :
 	  	case GALILEO_SPECTRA_RAPID :
+		case TEST_SPECTRA_RAPID :
 	    	{
 	      		/* bin_number */
 	      		status = nc_def_var( ncid, "bin_number", NC_INT, 1, variable_shape, &obs->bin_numberid);
@@ -945,6 +952,7 @@
 	  	case COPERNICUS :
 	  	case GALILEO :
 		case CAMRA :
+		case TEST :
 	    	{	
 	      		printf("Number of observations %d \n", obs->n_obs);
 	      		for (n = 0; n < obs->n_obs; n++ )
@@ -1168,7 +1176,7 @@
 			  			strcpy( buffer, "dBZ");
 			  			status = nc_put_att_text( ncid, obs->varid[n], "units", strlen(buffer), buffer);
 			  			if (status != NC_NOERR) { check_netcdf_handle_error(status); }
-			  			status = nc_put_att_float( ncid, obs->varid[n], "applied_calibration_offset", NC_FLOAT, 1, &param->ZED_HC_calibration_offset);
+			  			status = nc_put_att_float( ncid, obs->varid[n], "applied_calibration_offset", NC_FLOAT, 1, &param->ZED_calibration_offset);
 			  			if (status != NC_NOERR) check_netcdf_handle_error(status);
 					}
 		      			if (strcmp(obs->name[n], "ZED_HCD") == 0)
@@ -1216,7 +1224,7 @@
 			  			strcpy( buffer, "dBZ");
 			  			status = nc_put_att_text( ncid, obs->varid[n], "units", strlen(buffer), buffer);
 			  			if (status != NC_NOERR) { check_netcdf_handle_error(status); }
-			  			status = nc_put_att_float( ncid, obs->varid[n], "applied_calibration_offset", NC_FLOAT, 1, &param->ZED_HCP_calibration_offset);
+			  			status = nc_put_att_float( ncid, obs->varid[n], "applied_calibration_offset", NC_FLOAT, 1, &param->ZED_calibration_offset);
 			  			if (status != NC_NOERR) check_netcdf_handle_error(status);
 					}
 		      			if (strcmp(obs->name[n], "ZED_HCDP") == 0)
@@ -1264,7 +1272,7 @@
 			  			strcpy( buffer, "dBZ");
 			  			status = nc_put_att_text( ncid, obs->varid[n], "units", strlen(buffer), buffer);
 			  			if (status != NC_NOERR) { check_netcdf_handle_error(status); }
-			  			status = nc_put_att_float( ncid, obs->varid[n], "applied_calibration_offset", NC_FLOAT, 1, &param->ZED_XHC_calibration_offset);
+			  			status = nc_put_att_float( ncid, obs->varid[n], "applied_calibration_offset", NC_FLOAT, 1, &param->ZED_calibration_offset);
 			  			if (status != NC_NOERR) check_netcdf_handle_error(status);
 					}
 		      			if (strcmp(obs->name[n], "ZED_XHCP") == 0)
@@ -1280,7 +1288,7 @@
 			  			strcpy( buffer, "dBZ");
 			  			status = nc_put_att_text( ncid, obs->varid[n], "units", strlen(buffer), buffer);
 			  			if (status != NC_NOERR) { check_netcdf_handle_error(status); }
-			  			status = nc_put_att_float( ncid, obs->varid[n], "applied_calibration_offset", NC_FLOAT, 1, &param->ZED_XHCP_calibration_offset);
+			  			status = nc_put_att_float( ncid, obs->varid[n], "applied_calibration_offset", NC_FLOAT, 1, &param->ZED_calibration_offset);
 			  			if (status != NC_NOERR) check_netcdf_handle_error(status);
 					}
 		      			if (strcmp(obs->name[n], "ZED_VC") == 0)
@@ -1296,7 +1304,7 @@
 			  			strcpy( buffer, "dBZ");
 			  			status = nc_put_att_text( ncid, obs->varid[n], "units", strlen(buffer), buffer);
 			  			if (status != NC_NOERR) { check_netcdf_handle_error(status); }
-			  			status = nc_put_att_float( ncid, obs->varid[n], "applied_calibration_offset", NC_FLOAT, 1, &param->ZED_VC_calibration_offset);
+			  			status = nc_put_att_float( ncid, obs->varid[n], "applied_calibration_offset", NC_FLOAT, 1, &param->ZED_calibration_offset);
 			  			if (status != NC_NOERR) check_netcdf_handle_error(status);
 					}
 		      			if (strcmp(obs->name[n], "ZED_VCP") == 0)
@@ -1312,7 +1320,7 @@
 			  			strcpy( buffer, "dBZ");
 			  			status = nc_put_att_text( ncid, obs->varid[n], "units", strlen(buffer), buffer);
 			  			if (status != NC_NOERR) { check_netcdf_handle_error(status); }
-			  			status = nc_put_att_float( ncid, obs->varid[n], "applied_calibration_offset", NC_FLOAT, 1, &param->ZED_VCP_calibration_offset);
+			  			status = nc_put_att_float( ncid, obs->varid[n], "applied_calibration_offset", NC_FLOAT, 1, &param->ZED_calibration_offset);
 			  			if (status != NC_NOERR) check_netcdf_handle_error(status);
 					}
 		      			if (strcmp(obs->name[n], "ZED_XVC") == 0)
@@ -1328,7 +1336,7 @@
 			  			strcpy( buffer, "dBZ");
 			  			status = nc_put_att_text( ncid, obs->varid[n], "units", strlen(buffer), buffer);
 			  			if (status != NC_NOERR) { check_netcdf_handle_error(status); }
-			  			status = nc_put_att_float( ncid, obs->varid[n], "applied_calibration_offset", NC_FLOAT, 1, &param->ZED_XVC_calibration_offset);
+			  			status = nc_put_att_float( ncid, obs->varid[n], "applied_calibration_offset", NC_FLOAT, 1, &param->ZED_calibration_offset);
 			  			if (status != NC_NOERR) check_netcdf_handle_error(status);
 					}
 		      			if (strcmp(obs->name[n], "ZED_XVCP") == 0)
@@ -1344,7 +1352,7 @@
 			  			strcpy( buffer, "dBZ");
 			  			status = nc_put_att_text( ncid, obs->varid[n], "units", strlen(buffer), buffer);
 			  			if (status != NC_NOERR) { check_netcdf_handle_error(status); }
-			  			status = nc_put_att_float( ncid, obs->varid[n], "applied_calibration_offset", NC_FLOAT, 1, &param->ZED_XVCP_calibration_offset);
+			  			status = nc_put_att_float( ncid, obs->varid[n], "applied_calibration_offset", NC_FLOAT, 1, &param->ZED_calibration_offset);
 			  			if (status != NC_NOERR) check_netcdf_handle_error(status);
 					}
 		      			if (strcmp(obs->name[n], "SPW_H") == 0)
@@ -1446,62 +1454,6 @@
                                                 status = nc_put_att_text( ncid, obs->varid[n], "units", strlen(buffer), buffer);
                                                 if (status != NC_NOERR) { check_netcdf_handle_error(status); }
                                         }
-		      			if (strcmp(obs->name[n], "SKW_HC") == 0)
-					{
-			  			status = nc_def_var( ncid, "SKW_HC", NC_FLOAT, 2, variable_shape, &obs->varid[n]);
-			  			if (status != NC_NOERR) check_netcdf_handle_error(status);
-			  			strcpy( buffer, "doppler_spectral_skewness_at_horizontal_polarisation_from_spectral_processing");
-			  			status = nc_put_att_text( ncid, obs->varid[n], "chilbolton_standard_name", strlen(buffer), buffer);
-			  			if (status != NC_NOERR) { check_netcdf_handle_error(status); }
-			  			strcpy( buffer, "doppler spectral skewness at horizontal polarisation from spectral processing");
-			  			status = nc_put_att_text( ncid, obs->varid[n], "long_name", strlen(buffer), buffer);
-			  			if (status != NC_NOERR) { check_netcdf_handle_error(status); }
-			 			strcpy( buffer, " ");
-			  			status = nc_put_att_text( ncid, obs->varid[n], "units", strlen(buffer), buffer);
-			  			if (status != NC_NOERR) { check_netcdf_handle_error(status); }
-					}
-		      			if (strcmp(obs->name[n], "SKW_HCP") == 0)
-					{
-			  			status = nc_def_var( ncid, "SKW_HCP", NC_FLOAT, 2, variable_shape, &obs->varid[n]);
-			  			if (status != NC_NOERR) check_netcdf_handle_error(status);
-			  			strcpy( buffer, "doppler_spectral_skewness_at_horizontal_polarisation_from_spectral_processing_using_pulse_compression");
-			  			status = nc_put_att_text( ncid, obs->varid[n], "chilbolton_standard_name", strlen(buffer), buffer);
-			  			if (status != NC_NOERR) { check_netcdf_handle_error(status); }
-			  			strcpy( buffer, "doppler spectral skewness at horizontal polarisation from spectral processing using pulse compression");
-			  			status = nc_put_att_text( ncid, obs->varid[n], "long_name", strlen(buffer), buffer);
-			  			if (status != NC_NOERR) { check_netcdf_handle_error(status); }
-			  			strcpy( buffer, " ");
-			  			status = nc_put_att_text( ncid, obs->varid[n], "units", strlen(buffer), buffer);
-			  			if (status != NC_NOERR) { check_netcdf_handle_error(status); }
-					}
-		      			if (strcmp(obs->name[n], "KRT_HC") == 0)
-					{
-			  			status = nc_def_var( ncid, "KRT_HC", NC_FLOAT, 2, variable_shape, &obs->varid[n]);
-			  			if (status != NC_NOERR) check_netcdf_handle_error(status);
-			  			strcpy( buffer, "doppler_spectral_kurtosis_at_horizontal_polarisation_from_spectral_processing");
-			  			status = nc_put_att_text( ncid, obs->varid[n], "chilbolton_standard_name", strlen(buffer), buffer);
-			  			if (status != NC_NOERR) { check_netcdf_handle_error(status); }
-			  			strcpy( buffer, "doppler spectral excess kurtosis at horizontal polarisation from spectral processing");
-			  			status = nc_put_att_text( ncid, obs->varid[n], "long_name", strlen(buffer), buffer);
-			  			if (status != NC_NOERR) { check_netcdf_handle_error(status); }
-			 			strcpy( buffer, " ");
-			  			status = nc_put_att_text( ncid, obs->varid[n], "units", strlen(buffer), buffer);
-			  			if (status != NC_NOERR) { check_netcdf_handle_error(status); }
-					}
-		      			if (strcmp(obs->name[n], "KRT_HCP") == 0)
-					{
-			  			status = nc_def_var( ncid, "KRT_HCP", NC_FLOAT, 2, variable_shape, &obs->varid[n]);
-			  			if (status != NC_NOERR) check_netcdf_handle_error(status);
-			  			strcpy( buffer, "doppler_spectral_kurtosis_at_horizontal_polarisation_from_spectral_processing_using_pulse_compression");
-			  			status = nc_put_att_text( ncid, obs->varid[n], "chilbolton_standard_name", strlen(buffer), buffer);
-			  			if (status != NC_NOERR) { check_netcdf_handle_error(status); }
-			  			strcpy( buffer, "doppler spectral excess kurtosis at horizontal polarisation from spectral processing using pulse compression");
-			  			status = nc_put_att_text( ncid, obs->varid[n], "long_name", strlen(buffer), buffer);
-			  			if (status != NC_NOERR) { check_netcdf_handle_error(status); }
-			  			strcpy( buffer, " ");
-			  			status = nc_put_att_text( ncid, obs->varid[n], "units", strlen(buffer), buffer);
-			  			if (status != NC_NOERR) { check_netcdf_handle_error(status); }
-					}
 		      			if (strcmp(obs->name[n], "VEL_H") == 0)
 					{
 			  			status = nc_def_var( ncid, "VEL_H", NC_FLOAT, 2, variable_shape, &obs->varid[n]);
@@ -2170,6 +2122,7 @@
 			break;
                 }
                 case GALILEO_SPECTRA :
+		case TEST_SPECTRA :
                 {
                         status = nc_def_var( ncid, "PSD_HH", NC_SHORT, 3, variable_shape, &PSD_varid[0]);
                         if (status != NC_NOERR) check_netcdf_handle_error(status);
@@ -2183,6 +2136,7 @@
 			break;
                 }
 		case GALILEO_SPECTRA_RAPID :
+		case TEST_SPECTRA_RAPID :
 		{
 			variable_shape[0] = dimensions->time_dim;
 		        variable_shape[1] = dimensions->fft_bin_dim;
@@ -2472,6 +2426,7 @@
                 break;
 		}
 		case GALILEO_SPECTRA :
+		case TEST_SPECTRA :
                 {
 		/* write out IQ data first for all gates in one go */
 		variable_start[0] = obs->PSD_ray_number;
@@ -2483,7 +2438,7 @@
                 variable_count[2] = param->npsd;
                 variable_count[3] = param->samples_per_pulse;
 		/* write out IPF_HH */
-                status = nc_put_vara_short( ncid, PSD_varid[1], variable_start, variable_count, (IQStruct->I_uncoded_copolar_H));
+                status = nc_put_vara_short( ncid, PSD_varid[1], (const size_t *) variable_start, (const size_t *) variable_count, (IQStruct->I_uncoded_copolar_H));
                 if (status != NC_NOERR) check_netcdf_handle_error(status);
 		/* write out QPF_HH */
                 status = nc_put_vara_short( ncid, PSD_varid[2], variable_start, variable_count, (IQStruct->Q_uncoded_copolar_H));	
@@ -2557,7 +2512,7 @@
         azimuth = obs->azimuth + param->azimuth_offset;
 
 	/* start point of copernicus fft */
-	if ( radar == GALILEO_SPECTRA_RAPID ) {
+	if ( radar == GALILEO_SPECTRA_RAPID || radar == TEST_SPECTRA_RAPID ) {
 		temp_int = 0;
 		variable_count[1] = param->npsd;
 		start_bin = 6;
@@ -2575,11 +2530,12 @@
         {
 		case COPERNICUS_SPECTRA_RAPID :
 		case GALILEO_SPECTRA_RAPID :
+		case TEST_SPECTRA_RAPID :
                 {
 	                for(n = 0; n < param->samples_per_pulse; n++)
         	        {
 				save_data = 0;
-				if ( radar == GALILEO_SPECTRA_RAPID ) {
+				if ( radar == GALILEO_SPECTRA_RAPID || radar == TEST_SPECTRA_RAPID ) {
 					for( j = 0; j < param->npsd; j++) {
                                                 log_psd[j] = (short int) 1000 * log10( PSD[n].HH[j] );
                                                	if (log_psd[j] > 5000) {
